diff --git a/node_modules/@metamask/detect-provider/dist/detect-provider.js b/node_modules/@metamask/detect-provider/dist/detect-provider.js
index 4c72869..ee981e9 100644
--- a/node_modules/@metamask/detect-provider/dist/detect-provider.js
+++ b/node_modules/@metamask/detect-provider/dist/detect-provider.js
@@ -1,66 +1,67 @@
 (function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.detectEthereumProvider = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
-"use strict";
-/**
- * Returns a Promise that resolves to the value of window.ethereum if it is
- * set within the given timeout, or null.
- * The Promise will not reject, but an error will be thrown if invalid options
- * are provided.
- *
- * @param options - Options bag.
- * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.
- * Default: false
- * @param options.silent - Whether to silence console errors. Does not affect
- * thrown errors. Default: false
- * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to
- * be dispatched. Default: 3000
- * @returns A Promise that resolves with the Provider if it is detected within
- * given timeout, otherwise null.
- */
-function detectEthereumProvider({ mustBeMetaMask = false, silent = false, timeout = 3000, } = {}) {
-    _validateInputs();
-    let handled = false;
-    return new Promise((resolve) => {
-        if (window.ethereum) {
-            handleEthereum();
-        }
-        else {
-            window.addEventListener('ethereum#initialized', handleEthereum, { once: true });
-            setTimeout(() => {
+    "use strict";
+    /**
+     * Returns a Promise that resolves to the value of window.ethereum if it is
+     * set within the given timeout, or null.
+     * The Promise will not reject, but an error will be thrown if invalid options
+     * are provided.
+     *
+     * @param options - Options bag.
+     * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.
+     * Default: false
+     * @param options.silent - Whether to silence console errors. Does not affect
+     * thrown errors. Default: false
+     * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to
+     * be dispatched. Default: 3000
+     * @returns A Promise that resolves with the Provider if it is detected within
+     * given timeout, otherwise null.
+     */
+    function detectEthereumProvider({ mustBeMetaMask = false, silent = false, timeout = 3000, } = {}) {
+        _validateInputs();
+        let handled = false;
+        return new Promise((resolve) => {
+            if (window.misesEthereum) {
                 handleEthereum();
-            }, timeout);
-        }
-        function handleEthereum() {
-            if (handled) {
-                return;
-            }
-            handled = true;
-            window.removeEventListener('ethereum#initialized', handleEthereum);
-            const { ethereum } = window;
-            if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {
-                resolve(ethereum);
             }
             else {
-                const message = mustBeMetaMask && ethereum
-                    ? 'Non-MetaMask window.ethereum detected.'
-                    : 'Unable to detect window.ethereum.';
-                !silent && console.error('@metamask/detect-provider:', message);
-                resolve(null);
+                window.addEventListener('ethereum#initialized', handleEthereum, { once: true });
+                setTimeout(() => {
+                    handleEthereum();
+                }, timeout);
+            }
+            function handleEthereum() {
+                if (handled) {
+                    return;
+                }
+                handled = true;
+                window.removeEventListener('ethereum#initialized', handleEthereum);
+                const { misesEthereum } = window;
+                if (misesEthereum && (!mustBeMetaMask || misesEthereum.isMetaMask)) {
+                    resolve(misesEthereum);
+                }
+                else {
+                    const message = mustBeMetaMask && misesEthereum
+                        ? 'Non-MetaMask window.ethereum detected.'
+                        : 'Unable to detect window.ethereum.';
+                    !silent && console.error('@metamask/detect-provider:', message);
+                    resolve(null);
+                }
+            }
+        });
+        function _validateInputs() {
+            if (typeof mustBeMetaMask !== 'boolean') {
+                throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);
+            }
+            if (typeof silent !== 'boolean') {
+                throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);
+            }
+            if (typeof timeout !== 'number') {
+                throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);
             }
-        }
-    });
-    function _validateInputs() {
-        if (typeof mustBeMetaMask !== 'boolean') {
-            throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);
-        }
-        if (typeof silent !== 'boolean') {
-            throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);
-        }
-        if (typeof timeout !== 'number') {
-            throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);
         }
     }
-}
-module.exports = detectEthereumProvider;
+    module.exports = detectEthereumProvider;
+    
+    },{}]},{},[1])(1)
+    });
 
-},{}]},{},[1])(1)
-});
diff --git a/node_modules/@metamask/detect-provider/dist/detect-provider.min.js b/node_modules/@metamask/detect-provider/dist/detect-provider.min.js
index a5262e4..fb49cd7 100644
--- a/node_modules/@metamask/detect-provider/dist/detect-provider.min.js
+++ b/node_modules/@metamask/detect-provider/dist/detect-provider.min.js
@@ -1 +1 @@
-!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).detectEthereumProvider=e()}}((function(){return function({mustBeMetaMask:e=!1,silent:t=!1,timeout:o=3e3}={}){!function(){if("boolean"!=typeof e)throw new Error("@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.");if("boolean"!=typeof t)throw new Error("@metamask/detect-provider: Expected option 'silent' to be a boolean.");if("number"!=typeof o)throw new Error("@metamask/detect-provider: Expected option 'timeout' to be a number.")}();let n=!1;return new Promise(i=>{function r(){if(n)return;n=!0,window.removeEventListener("ethereum#initialized",r);const{ethereum:o}=window;if(!o||e&&!o.isMetaMask){const n=e&&o?"Non-MetaMask window.ethereum detected.":"Unable to detect window.ethereum.";!t&&console.error("@metamask/detect-provider:",n),i(null)}else i(o)}window.ethereum?r():(window.addEventListener("ethereum#initialized",r,{once:!0}),setTimeout(()=>{r()},o))})}}));
\ No newline at end of file
+!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).detectEthereumProvider=e()}}((function(){return function({mustBeMetaMask:e=!1,silent:t=!1,timeout:o=3e3}={}){!function(){if("boolean"!=typeof e)throw new Error("@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.");if("boolean"!=typeof t)throw new Error("@metamask/detect-provider: Expected option 'silent' to be a boolean.");if("number"!=typeof o)throw new Error("@metamask/detect-provider: Expected option 'timeout' to be a number.")}();let n=!1;return new Promise(i=>{function r(){if(n)return;n=!0,window.removeEventListener("ethereum#initialized",r);const{misesEthereum:o}=window;if(!o||e&&!o.isMetaMask){const n=e&&o?"Non-MetaMask window.misesEthereum detected.":"Unable to detect window.misesEthereum.";!t&&console.error("@metamask/detect-provider:",n),i(null)}else i(o)}window.misesEthereum?r():(window.addEventListener("ethereum#initialized",r,{once:!0}),setTimeout(()=>{r()},o))})}}));
\ No newline at end of file
diff --git a/node_modules/@metamask/detect-provider/dist/index.d.ts b/node_modules/@metamask/detect-provider/dist/index.d.ts
index 59d15f3..33eba75 100644
--- a/node_modules/@metamask/detect-provider/dist/index.d.ts
+++ b/node_modules/@metamask/detect-provider/dist/index.d.ts
@@ -1,9 +1,16 @@
 interface EthereumProvider {
     isMetaMask?: boolean;
+    showAds: () => void;
+    cancelAds: () => void;
+    signMessageForAuth: (address: string, nonce: string) => ({sig: string});
+    getCachedAuth: () => Promise<{
+        auth: string,
+        misesId: string
+    }>
 }
 declare global {
     interface Window {
-        ethereum?: EthereumProvider;
+        misesEthereum?: EthereumProvider;
     }
 }
 export = detectEthereumProvider;
diff --git a/node_modules/@metamask/detect-provider/dist/index.js b/node_modules/@metamask/detect-provider/dist/index.js
index a3b017f..07651bd 100644
--- a/node_modules/@metamask/detect-provider/dist/index.js
+++ b/node_modules/@metamask/detect-provider/dist/index.js
@@ -19,7 +19,7 @@ function detectEthereumProvider({ mustBeMetaMask = false, silent = false, timeou
     _validateInputs();
     let handled = false;
     return new Promise((resolve) => {
-        if (window.ethereum) {
+        if (window.misesEthereum) {
             handleEthereum();
         }
         else {
@@ -34,14 +34,14 @@ function detectEthereumProvider({ mustBeMetaMask = false, silent = false, timeou
             }
             handled = true;
             window.removeEventListener('ethereum#initialized', handleEthereum);
-            const { ethereum } = window;
-            if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {
-                resolve(ethereum);
+            const { misesEthereum } = window;
+            if (misesEthereum && (!mustBeMetaMask || misesEthereum.isMetaMask)) {
+                resolve(misesEthereum);
             }
             else {
-                const message = mustBeMetaMask && ethereum
-                    ? 'Non-MetaMask window.ethereum detected.'
-                    : 'Unable to detect window.ethereum.';
+                const message = mustBeMetaMask && misesEthereum
+                    ? 'Non-MetaMask window.misesEthereum detected.'
+                    : 'Unable to detect window.misesEthereum.';
                 !silent && console.error('@metamask/detect-provider:', message);
                 resolve(null);
             }
